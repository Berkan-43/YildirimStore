"""
Django settings for eshopper project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from dotenv import load_dotenv
from django.contrib.messages import constants as message_constants
from pathlib import Path
import os

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRT_PARTY_APPS = [
    'ckeditor',
    'crispy_forms',
    'mptt',
    'django_cleanup',
    'mathfilters',

    # django-allauth
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # social providers
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github', 
    'allauth.socialaccount.providers.twitter',
    'allauth.socialaccount.providers.facebook',
]

MY_APPS = [
    'home',
    'product',
    'order',
    'user',
]

INSTALLED_APPS = BASE_APPS + THIRT_PARTY_APPS + MY_APPS


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'eshopper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
    BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'eshopper.project_context_processors.global_category_context',
                'eshopper.project_context_processors.global_setting_context',
                'eshopper.project_context_processors.global_register_form_context',
                'eshopper.project_context_processors.global_login_form_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'eshopper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.environ.get('DB_NAME'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'tr-tr'

TIME_ZONE = 'Turkey'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static']
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = ''
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

EMAIL_ADMIN = os.environ.get('EMAIL_ADMIN')
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587  # üretim modunda bu seçeneği kullanın
# EMAIL_PORT = 465 # bu seçeneği debug modu aktifken kullanın
# EMAIL_USE_TLS = False # üretim modunda bu seçeneği kullanın
EMAIL_USE_TLS = True # bu seçeneği debug modu aktifken kullanın
# EMAIL_USE_SSL = False  # üretim modunda bu seçeneği kullanın
# EMAIL_USE_SSL = True # bu seçeneği debug modu aktifken kullanın
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

MESSAGE_TAGS = {message_constants.DEBUG: 'debug',
                message_constants.INFO: 'info',
                message_constants.SUCCESS: 'success',
                message_constants.WARNING: 'warning',
                message_constants.ERROR: 'danger', }

LOGGING={
    "version":1,
    "disable_existing_loggers":False,
    'formatters':{
        "basit_ifade":{
            "format":"{asctime} {message} {name} {levelname}",
            "style": "{",
        }
    },
    "handlers":{
        "console":{
            "class":"logging.StreamHandler"
        },
        "file":{
            "class":"logging.FileHandler",
            "filename":"logs/giris_yapanlar.log",
            "formatter":"basit_ifade"
        }
    },
    "loggers:":{
        "giris_yapma":{
            "handlers":["file"],
            "level":"INFO",
            "formatter":"basit_ifade"
        }
    }
}

AUTH_USER_MODEL = 'user.UserProfile' 

SITE_ID = 2 # site id'si dir  1,2,3 veya 4 olabilir.
SOCIALACCOUNT_AUTO_SIGNUP = True # Sosyal hesap sağlayıcısından alınan alanları (örn. kullanıcı adı, e-posta) kullanarak kayıt formunu atlar.
SOCIALACCOUNT_LOGIN_ON_GET=True # Bir sosyal oturum açma başlatmak için uç noktaların (örneğin, "/accounts/google/login/") el sıkışmayı başlatmak için bir POST isteği gerektirip gerektirmediğini kontrol eder.
LOGIN_REDIRECT_URL = '/' # Kullanıcı giriş yaptıktan sonra yönlendirilecek URL
SIGNUP_REDIRECT_URL = 'account_login' # Kayıt oluşturduktan sonra nereye yönlendirileceğini belirler
ACCOUNT_USERNAME_REQUIRED = True # Kullanıcının kaydolurken bir kullanıcı adı girmesi gerekir.
ACCOUNT_EMAIL_REQUIRED = True # Kullanıcının kayıt olurken bir e-posta adresi vermesi gerekmektedir
ACCOUNT_AUTHENTICATION_METHOD='username_email'  # hem e-posta hemde kullanıcı adı ile girişi onaylar
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/' # Kimliği doğrulanmış bir kullanıcı olması durumunda, başarılı bir e-posta onayından sonra yönlendirilecek URL
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # Email doğrulaması kullanıcı isterse doğrulayabilir = optional, Zorunlu e-posta doğrulaması istenir = mandatory,  none ise doğrulama istenmez
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_UR = True # kullanıcılar e-posta adreslerini onayladıktan sonra otomatik olarak oturum açacaktır.
ACCOUNT_LOGOUT_REDIRECT_URL  = 'index' # Kullanıcı oturumu kapattıktan sonra yönlendirilecek URL
ACCOUNT_SESSION_REMEMBER = None  # Beni Hatırla, None İse beni hatırlayı isterse işaretleyecek ve hatırlanacak, True ise her seferinde kullanıcıya sormaksızın hatırlayacak  False ise hiç hatırlamayacak.
ACCOUNT_LOGOUT_ON_GET = True # default olarak tanımlanmış sayfayı devre dılı bırakır ve Direk istediğin yere yönlendirir False durumunda tam tersi'dir.
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True


ACCOUNT_FORMS = {  # allauth'un formlarını devre dışı bırakarak kendi formunu eklemeye yarar önce app adı sonra dosya adı ve daha sonra dosyanın içindeki ilgili class'ın ismi yazılır
    'login': 'user.forms.UserLoginForm',
    'remember': 'user.forms.UserLoginForm',
    'signup': 'user.forms.CustomUserCreationForm',
    'add_email': 'user.forms.EmailAddForm',
    'change_password': 'user.forms.PasswordChange',
    'reset_password': 'user.forms.PasswordCReset',
    'reset_password_from_key': 'user.forms.PasswordResetKey',
    'set_password': 'user.forms.PasswordSetForm',
    }

# manual olarak üye olmuş bir kullanıcı daha sonra google ile giriş yapmaya kalkarsa zaten var olan kullanıcıyı otomatik olarak bağlamak için yaptım.
SOCIALACCOUNT_ADAPTER = 'user.adapter.MySocialAccountAdapter'

# Aşşağıdakiler de django allauth tarafından olması gereken default ayarlardır.
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend'
]


SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'github': {
        'SCOPE': [
            'user',
            'repo',
            'read:org',
        ],
    },
    'facebook':{
    'METHOD': 'oauth2',
    'SCOPE': ['email','public_profile', 'user_friends'],
    'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
    'FIELDS': [
    'id',
    'email',
    'name',
    'first_name',
    'last_name',
    'verified',
    'locale',
    'timezone',
    'link',
    'gender',
    'updated_time'],
    'EXCHANGE_TOKEN': True,
    'LOCALE_FUNC': lambda request: 'kr_KR',
    'VERIFIED_EMAIL': False,
    'VERSION': 'v2.4'
    }
    }

SOCIALACCOUNT_PROVIDERS = \
{}


#  Özelleştirilebilen django-allauth formları
# ACCOUNT_FORMS = {
#     'login': 'allauth.account.forms.LoginForm',
#     'signup': 'allauth.account.forms.SignupForm',
#     'add_email': 'allauth.account.forms.AddEmailForm',
#     'change_password': 'allauth.account.forms.ChangePasswordForm',
#     'set_password': 'allauth.account.forms.SetPasswordForm',
#     'reset_password': 'allauth.account.forms.ResetPasswordForm',
#     'reset_password_from_key': 
#     'allauth.account.forms.ResetPasswordKeyForm',
#     'disconnect': 'allauth.socialaccount.forms.DisconnectForm',
# }